gridcore-controller/src/controller/cell_editor.rs:    pub fn submit_formula_bar(
gridcore-controller/src/controller/cell_editor.rs:    pub fn submit_cell_edit(
gridcore-controller/src/controller/cell_editor.rs:    pub fn complete_editing(
gridcore-controller/src/controller/cell_editor.rs:    pub fn create_events(&self) -> Vec<(SpreadsheetEvent, Option<(String, ErrorSeverity)>)> {
gridcore-controller/src/controller/cell_editor.rs:    pub fn next_action(&self) -> Option<Action> {
gridcore-controller/src/controller/events.rs:    pub fn new(key: String) -> Self {
gridcore-controller/src/controller/events.rs:    pub fn with_modifiers(mut self, shift: bool, ctrl: bool, alt: bool, meta: bool) -> Self {
gridcore-controller/src/controller/events.rs:    pub fn is_printable(&self) -> bool {
gridcore-controller/src/controller/events.rs:    pub fn is_navigation(&self) -> bool {
gridcore-controller/src/controller/events.rs:    pub fn to_vim_notation(&self) -> String {
gridcore-controller/src/controller/events.rs:    pub fn new(x: f64, y: f64, button: MouseButton, event_type: MouseEventType) -> Self {
gridcore-controller/src/controller/events.rs:    pub fn with_modifiers(mut self, shift: bool, ctrl: bool, alt: bool, meta: bool) -> Self {
gridcore-controller/src/controller/events.rs:    pub fn new() -> Self {
gridcore-controller/src/controller/events.rs:    pub fn subscribe<F>(&mut self, listener: F) -> usize
gridcore-controller/src/controller/events.rs:    pub fn unsubscribe(&mut self, index: usize) {
gridcore-controller/src/controller/events.rs:    pub fn dispatch(&self, event: &SpreadsheetEvent) {
gridcore-controller/src/controller/events.rs:    pub fn on_state_change<F>(&mut self, callback: F)
gridcore-controller/src/controller/events.rs:    pub fn on_cell_edit<F>(&mut self, callback: F)
gridcore-controller/src/controller/events.rs:    pub fn on_error<F>(&mut self, callback: F)
gridcore-controller/src/controller/events.rs:    pub fn notify_state_change(&self) {
gridcore-controller/src/controller/events.rs:    pub fn notify_cell_edit(&self, address: &CellAddress, value: &str) {
gridcore-controller/src/controller/events.rs:    pub fn notify_error(&self, message: &str, severity: ErrorSeverity) {
gridcore-controller/src/controller/events.rs:    pub fn clear(&mut self) {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn new() -> Self {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn with_config(config: GridConfiguration) -> Self {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn with_viewport(viewport_manager: ViewportManager, config: GridConfiguration) -> Self {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn with_state(initial_state: UIState) -> Self {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn state(&self) -> &UIState {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn cursor(&self) -> CellAddress {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn state_machine(&mut self) -> super::state_access::DirectStateAccess<'_> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn state_ref(&self) -> &UIState {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn dispatch_action(&mut self, action: Action) -> Result<()> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn facade(&self) -> &SpreadsheetFacade {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn facade_mut(&mut self) -> &mut SpreadsheetFacade {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_cell_display_for_ui(&self, address: &CellAddress) -> String {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn errors(&mut self) -> super::operations::ErrorOperations<'_> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn cells(&mut self) -> super::operations::CellOperations<'_> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn sheets(&mut self) -> super::operations::SheetOperations<'_> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn selection(&self) -> super::operations::SelectionOperations<'_> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_viewport_manager(&self) -> &ViewportManager {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_viewport_manager_mut(&mut self) -> &mut ViewportManager {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_config(&self) -> &GridConfiguration {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn resize_state(&self) -> &ResizeState {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn resize_state_mut(&mut self) -> &mut ResizeState {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_current_selection_stats(&self) -> selection_stats::SelectionStats {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_error_manager(&self) -> &ErrorSystem {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_error_manager_mut(&mut self) -> &mut ErrorSystem {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn get_active_errors(&self) -> Vec<crate::managers::ErrorEntry> {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn clear_all_errors(&mut self) {
gridcore-controller/src/controller/spreadsheet.rs:    pub fn remove_error(&mut self, id: usize) -> bool {
